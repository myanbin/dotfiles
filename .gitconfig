[alias]

	a     = add
	aa    = add -A                                # Stage all changes.
	amend = commit --amend
	ap    = add -p                                # Stage changes chunk by chunk
	b     = branch -v                             # Shorthand for branch (verbose)
	ba    = branch -av
	c     = commit
	ca    = !git add -A && git commit             # Commit all changes.
	co    = checkout
	d     = diff                                  # Diff unstaged changes
	da    = diff HEAD                             # Diff unstaged and staged changes
	dc    = diff --cached                         # Diff staged changes
	ds    = diff --stat
	dw    = diff --color-words                    # Show a word diff instead a line
	dump  = cat-file -p                           # Show content of git object
	f     = fetch
	# Find commits by commit message
	find  = "!f() { git log --pretty=basic --name-status --grep=$1; }; f"
	fixup = commit --fixup
	g     = log --graph --pretty=basic            # Show basic graph.
	git   = !exec git                             # Allow `$ git git git...`
	h     = help                                  # Shorthand for help
	hi    = !echo 'hello, welcome to use myanbin/dotfiles'
	l     = log --pretty=basic                    # Show basic log. (oneline)
	ll    = log --pretty=intermediate --stat      # Show intermediate log.
	m     = merge
	new   = checkout -b                           # Create a new branch.
	p     = pull
	pick  = cherry-pick
	pop   = reset HEAD^                           # Pop your last commit out of the history
	r     = remote -v                             # Shorthand for remote (verbose)
	rc    = rebase --continue
	rs    = rebase --skip
	s     = status
	sh    = show
	ss    = status -sb
	type  = cat-file -t                           # Show type of git object
	undo  = reset HEAD~                           # Undo last commit, with files in uncommitted state
	who   = shortlog --no-merges --email --numbered --summary
	zip   = archive --format=zip -o latest.zip HEAD

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]

	current = green bold
	local = green
	remote = yellow

[color "diff"]

	frag = magenta
	meta = yellow

	new = green
	old = red

	newMoved = cyan
	oldMoved = blue

[color "status"]

	added = green reverse
	branch = cyan bold
	changed = yellow reverse
	untracked = red reverse

[core]

	abbrev = 8
	attributesfile = ~/.gitattributes
	autocrlf = input
	editor = vim
	excludesfile = ~/.gitignore

[commit]

	template = ~/.gitmessage

[diff]

	# Show blocks of moved text of at least 20
	# alphanumeric characters differently than adds/deletes.
	#
	# https://git-scm.com/docs/git-diff#git-diff-zebra

	colorMoved = zebra

[diff "bin"]

	# Use `hexdump` to diff binary files.

	textconv = hexdump -v -C

[pretty]

	basic = "%C(magenta)%h%C(red)%d %C(reset)%s %C(green)%ar %C(yellow)(%an)"
	#                    │        │           │           │              └─ author name
	#                    │        │           │           └─ date (relative)
	#                    │        │           └─ message
	#                    │        └─ decorations (branch, heads or tags)
	#                    └─ hash (abbreviated)

	intermediate = "%C(magenta)%h %C(blue)← %p%C(red)%d %C(reset)%s %C(green)%ar %C(yellow)(%an)"
	#                           │            │        │           │           │              └─ author name
	#                           │            │        │           │           └─ date (relative)
	#                           │            │        │           └─ message
	#                           │            │        └─ decorations (branch, heads or tags)
	#                           │            └─ parent hashes (abbreviated)
	#                           └─ hash (abbreviated)

[pull]
	# Only fast-forward merges are allowed

	ff = only

[push]

	# Defines the action git push should take if no refspec is explicitly given.
	# https://git-scm.com/docs/git-config#git-config-pushdefault

	default = simple

	# Make `git push` automatically push relevant
	# annotated tags when pushing branches out.

	followTags = true

[user]

	# Don't guess the user's identity.
	# https://github.com/git/git/blob/90f7b16b3adc78d4bbabbd426fb69aa78c714f71/Documentation/config.txt#L2847-L2855

	useConfigOnly = true

[include]

	# Load local configs.
	# https://git-scm.com/docs/git-config#_includes
	#
	# [!] The following needs to remain at the end of this file in
	#     order to allow any of the above configs to be overwritten
	#     by the local ones

	path = ~/.gitconfig.local
